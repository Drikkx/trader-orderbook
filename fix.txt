Step 1: Rate-Limit SETTINGS Frames
 
Implement server-side rate limiting to restrict the number of SETTINGS frames processed within a given time window. This can prevent excessive SETTINGS frames from overwhelming the server.
 
For NGINX (if applicable):
 
Add HTTP/2-specific rate limits to your NGINX configuration. Use the http2_max_requests and http2_recv_timeout directives to limit the number of requests and control the time window.
 
Example:
 
http {
    server {
        listen 443 ssl http2;
        server_name api.forlootandglory.io;
 
        # Set maximum requests to prevent excessive SETTINGS frames
        http2_max_requests 1000;
 
        # Set a timeout for receiving SETTINGS frames
        http2_recv_timeout 5s;
 
        ssl_certificate /path/to/certificate.crt;
        ssl_certificate_key /path/to/private.key;
 
        # Other configurations...
    }
}
 
Restart NGINX after applying changes:
 
sudo systemctl restart nginx
 
For Node.js (HTTP/2 Backend):
 
If using a Node.js backend, limit the number of SETTINGS frames processed. Node.js does not provide direct HTTP/2 frame-level controls, but you can override the on('stream') or on('frameError') events for more control.
 
Example:
 
const http2 = require('http2');
const fs = require('fs');
 
const server = http2.createSecureServer({
    key: fs.readFileSync('/path/to/private.key'),
    cert: fs.readFileSync('/path/to/certificate.crt'),
});
 
let settingsCounter = {};
 
server.on('stream', (stream, headers) => {
    const clientId = headers[':authority'];
 
    // Initialize or increment settings frame counter
    settingsCounter[clientId] = (settingsCounter[clientId] || 0) + 1;
 
    // If SETTINGS frames exceed a threshold, close the connection
    if (settingsCounter[clientId] > 100) {
        console.warn(`Client ${clientId} exceeded SETTINGS frame limit`);
        stream.session.destroy(); // Close the connection
    }
});
 
server.listen(443, () => {
    console.log('HTTP/2 server running on port 443');
});
 
Step 2: Apply Connection-Level Limits
 
Ensure that HTTP/2 connections are limited to a reasonable number of simultaneous streams and headers.
 
NGINX Configuration:
 
Adjust HTTP/2 connection limits using directives like http2_max_concurrent_streams and http2_max_field_size:
 
http {
    server {
        listen 443 ssl http2;
        server_name api.forlootandglory.io;
 
        # Limit maximum concurrent streams per connection
        http2_max_concurrent_streams 128;
 
        # Limit header field size to prevent abuse
        http2_max_field_size 16k;
 
        ssl_certificate /path/to/certificate.crt;
        ssl_certificate_key /path/to/private.key;
    }
}
 
=====================
 
You may also want to consider to do the HTTP/2 block in this fashion, but if you want to keep it enabled, follow the above.
 
If you cannot change the backend settings or need an interim solution, force clients (like cURL or libraries) to use HTTP/1.1 explicitly.
 
Example for cURL
 
curl --http1.1 https://api.forlootandglory.io/
 
Example for Axios (Node.js)
 
const axios = require('axios');
 
axios.get('https://api.forlootandglory.io/', {
    headers: { 'Connection': 'keep-alive' },
    httpAgent: new require('http').Agent({ keepAlive: true }),
})
.then(response => console.log(response.data))
.catch(error => console.error(error));